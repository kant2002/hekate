module Hekate.Tests

open Hekate
open Swensen.Unquote
open Xunit

type ФактAttribute = FactAttribute
type искл = exn

(* Fixtures *)

let private г1 =
    Граф.пустой

let private г2 =
    Граф.создать 
        [ 1, "один"
          2, "два"
          3, "три" ]
        [ 2, 1, "влево"
          3, 1, "вверх"
          1, 2, "вправо"
          2, 3, "вниз" ]

(* Создание *)

[<Факт>]
let ``Вершины.добавить ведет себя корректно`` () =
    let г3 = Граф.Вершины.добавить (4, "четыре") г2

    Граф.Вершины.количество г3 =! 4
    Граф.Вершины.количество г3 =! 4

[<Факт>]
let ``Вершины.убрать ведет себя корректно`` () =
    let г3 = Граф.Вершины.убрать 1 г2

    Граф.Вершины.количество г3 =! 2
    Граф.Ребра.количество г3 =! 1

[<Факт>]
let ``Ребра.добавить ведет себя корректно`` () =
    let г3 = Граф.Ребра.добавить (1, 3, "вниз") г2

    Граф.Вершины.количество г3 =! 3
    Граф.Ребра.количество г3 =! 5

[<Факт>]
let ``Ребра.убрать ведет себя корректно`` () =
    let г3 = Граф.Ребра.убрать (2, 1) г2

    Граф.Вершины.количество г3 =! 3
    Граф.Ребра.количество г3 =! 3

(* Запросы *)

[<Факт>]
let ``Ребра.содержит ведет себя корректно`` () =
    Граф.Ребра.содержит 1 2 г2 =! true
    Граф.Ребра.содержит 1 3 г2 =! false

[<Факт>]
let ``Вершины.содержит ведет себя корректно`` () =
    Граф.Вершины.содержит 1 г2 =! true
    Граф.Вершины.содержит 4 г2 =! false

[<Факт>]
let ``пуст ведет себя корректно`` () =
    Граф.пуст г1 =! true
    Граф.пуст г2 =! false

(* Отображение *)

[<Факт>]
let ``Ребра.отображение ведет себя корректно`` () =
    let г3 = Граф.Ребра.отображение (fun в1 в2 (р: string) -> sprintf "%i.%i.%s" в1 в2 р) г2

    Граф.Ребра.найти 1 2 г3 =! (1, 2, "1.2.вправо")

[<Факт>]
let ``Вершины.отображение ведет себя корректно`` () =
    let г3 = Граф.Вершины.отображение (fun _ (ч: string) -> ч.ToUpper ()) г2

    snd (Граф.Вершины.найти 1 г2) =! "один"
    snd (Граф.Вершины.найти 1 г3) =! "ОДИН"

[<Факт>]
let ``Вершины.отображениеСвертка ведет себя корректно`` () =
    let с, г3 = Граф.Вершины.отображениеСвертка (fun с _ (ч: string) -> ч.ToUpper (), с + 1) 0 г2

    snd (Граф.Вершины.найти 1 г2) =! "один"
    snd (Граф.Вершины.найти 1 г3) =! "ОДИН"
    с =! 3

(* Проекция *)

[<Факт>]
let ``Вершины.вСписок ведет себя корректно`` () =
    List.length (Граф.Вершины.вСписок г2) =! 3

[<Факт>]
let ``Ребра.вСписок ведет себя корректно`` () =
    List.length (Граф.Ребра.вСписок г2) =! 4

(* Инспекция *)

[<Факт>]
let ``Вершины.попробоватьНайти ведет себя корректно`` () =
    Граф.Вершины.попробоватьНайти 1 г2 =! Some (1, "один")
    Граф.Вершины.попробоватьНайти 4 г2 =! None

[<Факт>]
let ``Вершины.найти ведет себя корректно`` () =
    Граф.Вершины.найти 1 г2 =! (1, "один")
    raises<искл> <@ Граф.Вершины.найти 4 г2 @>

[<Факт>]
let ``рев ведет себя корректно`` () =
    let г3 = Граф.рев г2
    let г4 = Граф.Ребра.убрать (1, 3) г3

    Граф.Ребра.количество г3 =! 4
    Граф.Ребра.количество г4 =! 3

(* Смежность/Степень *)

[<Факт>]
let ``Вершины.соседи ведет себя корректно`` () =
    Граф.Вершины.соседи 1 г2
        =! Some [ 2, "влево"
                  3, "вверх"
                  2, "вправо" ]

[<Факт>]
let ``Вершины.наследники ведет себя корректно`` () =
    Граф.Вершины.наследники 1 г2
        =! Some [ 2, "вправо" ]

[<Факт>]
let ``Вершины.предшественники ведет себя корректно`` () =
    Граф.Вершины.предшественники 1 г2 
        =! Some [ 2, "влево"
                  3, "вверх" ]

[<Факт>]
let ``Вершины.исходящие ведет себя корректно`` () =
    Граф.Вершины.исходящие 1 г2 
        =! Some [ 1, 2, "вправо" ]

[<Факт>]
let ``Вершины.входящие ведет себя корректно`` () =
    Граф.Вершины.входящие 1 г2 
        =! Some [ 2, 1, "влево"
                  3, 1, "вверх" ]

[<Факт>]
let ``Вершины.степень ведет себя корректно`` () =
    Граф.Вершины.степень 1 г2 
        =! Some 3

[<Факт>]
let ``Вершины.полустепеньИсхода ведет себя корректно`` () =
    Граф.Вершины.полустепеньИсхода 1 г2 
        =! Some 1

[<Факт>]
let ``Вершины.полустепеньЗахода ведет себя корректно`` () =
    Граф.Вершины.полустепеньЗахода 1 г2 
        =! Some 2